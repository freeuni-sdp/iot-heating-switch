FORMAT: 1A
HOST: https://iot-heating-switch.herokuapp.com/

# iot-heating-switch

IOT Heating switch. Switching heating on multiple floors.

## Ping [/ping]

Ping service

### Get ping response [GET]

+ Response 200

## House info [/house/{house_id}]

Change, get house heating switch data

### List of floor temperatures [GET]

Returns with a list of statuses of all floors in a given house.
If `house_id` is wrong returns with code `404` or else if connection
with house is unavailable with code `503`.

`houseId` is same as `house_id`.
    
`switches` contain a mapping from switch id to switch info.

`values` is a list of all switches.

`id` is switch id in a house, that is key of 'switches' map.

'status' indicates weather switch is on (true) or off (false).

'available' indicates weather connection is available to a particuar switch.

+ Response 200 (application/json)

        {
            "houseId":"3c5afb74-2e82-4f10-9931-89187fe47adf",
            "switches":
                {
                    "1": {
                        "id":1,
                        "status":true,
                        "available":true
                    },
                    "2": {
                        "id":2,
                        "status":false,
                        "available":true
                    },
                    "3": {
                        "id":3,
                        "status":false,
                        "available":false
                    }
                },
            "values": [
                { 
                    "id":1,
                    "status":true,
                    "available":true
                },
                {
                    "id":2,
                    "status":false,
                    "available":true
                },
                {
                    "id":3,
                    "status":false,
                    "available":false
                }
            ]
        }

+ Response 404 (application/json)

+ Response 503 (application/json)

## Floor switch [/house/{house_id}/floor/{floor_id}]

### Get floor temperature [GET]

Returns a status of a switch in a given house and a floor.
On success returns with status code `200` with body containing
switch status.

`id` integer value, same as `floor_id`

`status` is boolean switch status

`available` weather switch is available from the server.

+ Response 200 (application/json)

        {
            "id":1,
            "status":true,
            "available":true
        }

+ Response 200 (application/json)

        {
            "id":1,
            "status":false,
            "available":false
        }

+ Response 404 (application/json)


### Switch on heater [PUT]

Turns on a heater on a given house/floor.
On success returns with code `200`, if house or floor number
is not valid `404` is returned. If other problem occures 
`503` is returned.

`period` is a nonnegative integer
representing number of seconds to keep switch status. After that
if no other switch request is received switch will move to
'safe state'.

+ Request (application/json)

        {
            "period": 600
        }

+ Response 200 (application/json)

+ Response 503 (application/json)

### Switch off heater [DELETE]

Switches off a given heater.

No body required.

On success returns with `200` code.

If connection to heater is unavailable returns with `503`

+ Request (application/json)

+ Response 200 (application/json)

+ Response 503 (application/json)